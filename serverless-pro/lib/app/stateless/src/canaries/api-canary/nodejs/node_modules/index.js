const synthetics = require('Synthetics');

const syntheticsConfiguration = synthetics.getConfiguration();

const apiCanaryBlueprint = async function () {
  syntheticsConfiguration.setConfig({
    restrictedHeaders: [],
    restrictedUrlParameters: [],
  });

  const validateSuccessful = async function (res) {
    return new Promise((resolve) => {
      if (res.statusCode < 200 || res.statusCode > 299) {
        throw `${res.statusCode}  ${res.statusMessage}`;
      }

      let responseBody = '';
      res.on('data', (d) => {
        responseBody += d;
      });

      res.on('end', () => {
        resolve();
      });
    });
  };

  let requestOptions = {
    hostname: `api-${process.env.STAGE}.${process.env.APP_API_HOST}`,
    method: 'GET',
    path: `/orders`,
    port: '443',
    protocol: 'https:',
    headers: {},
  };

  if (requestOptions['headers']) {
    requestOptions['headers']['User-Agent'] = [
      synthetics.getCanaryUserAgentString(),
      requestOptions['headers']['User-Agent'],
    ].join(' ');
  }

  let stepConfig = {
    includeRequestHeaders: true,
    includeResponseHeaders: true,
    includeRequestBody: true,
    includeResponseBody: true,
    continueOnHttpStepFailure: true,
  };

  await synthetics.executeHttpStep(
    'Verify /orders',
    requestOptions,
    validateSuccessful,
    stepConfig,
  );
};

exports.handler = async () => {
  return await apiCanaryBlueprint();
};