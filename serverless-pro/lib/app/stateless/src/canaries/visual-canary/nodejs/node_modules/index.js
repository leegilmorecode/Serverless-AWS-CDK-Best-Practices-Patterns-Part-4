const { URL } = require('url');
const log = require('SyntheticsLogger');
const synthetics = require('Synthetics');
const syntheticsConfiguration = synthetics.getConfiguration();
 
const loadBlueprint = async function () {
    const urls = [process.env.WEBSITE_URL]; // this is where you add your website url
    syntheticsConfiguration.disableStepScreenshots();
    syntheticsConfiguration.setConfig({
       continueOnStepFailure: true,
       includeRequestHeaders: true,
       includeResponseHeaders: true,
       restrictedHeaders: [],
       restrictedUrlParameters: [],
    });
 
    syntheticsConfiguration.withVisualCompareWithBaseRun(true); // this ensures that it checks against the previous run
    syntheticsConfiguration.withVisualVarianceThresholdPercentage(5); // this is the percentage threshold of variance
 
    let page = await synthetics.getPage();
 
    for (const url of urls) {
        await loadUrl(page, url);
    }
};
 
const loadUrl = async function (page, urlPage) {
    let stepName = null;

    try {
        stepName = new URL(urlPage).hostname;
    } catch (error) {
        const errorString = `Error parsing url: ${urlPage}.  ${error}`;
        log.error(errorString);
        throw error;
    }
 
    await synthetics.executeStep(stepName, async function () {
        const response = await page.goto(urlPage, { waitUntil: ['domcontentloaded'], timeout: 30000});

        if (response) {
            const status = response.status();
            const statusText = response.statusText();
 
            const logResponseString = `Response from url: ${urlPage}  Status: ${status}  Status Text: ${statusText}`;
            log.info(logResponseString);
 
            if (response.status() < 200 || response.status() > 299) {
                throw `Failed to load url: ${urlPage} ${response.status()} ${response.statusText()}`;
            }
        } else {
            const logNoResponseString = `No response returned for url: ${urlPage}`;
            log.error(logNoResponseString);
            throw new Error(logNoResponseString);
        }
        await page.waitFor(1000);
        await synthetics.takeScreenshot(stepName, 'loaded');
    });
};

exports.handler = async () => {
    return await loadBlueprint();
};